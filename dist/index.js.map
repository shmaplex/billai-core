{"version":3,"sources":["../src/index.ts","../src/core/index.ts","../src/shared/schemas/usagePayload.schema.ts","../src/shared/constants/features.ts","../src/shared/schemas/modelUsage.schema.ts","../src/shared/schemas/apiKey.schema.ts","../src/shared/schemas/usageLog.schema.ts","../src/shared/schemas/app.schema.ts","../src/shared/schemas/organization.schema.ts","../src/shared/schemas/user.schema.ts","../src/shared/schemas/alert.schema.ts","../src/shared/schemas/appApiKey.schema.ts","../src/shared/schemas/auditLog.schema.ts","../src/shared/schemas/invoice.schema.ts","../src/shared/schemas/charge.schema.ts","../src/shared/schemas/endUser.schema.ts","../src/shared/schemas/invoiceItem.schema.ts","../src/shared/schemas/mfa.schema.ts","../src/shared/schemas/plan.schema.ts","../src/shared/schemas/organizationPlan.schema.ts","../src/shared/schemas/planFeature.schema.ts","../src/shared/schemas/revenueSplit.schema.ts","../src/shared/schemas/review.schema.ts","../src/shared/schemas/role.schema.ts","../src/shared/schemas/userPreferences.schema.ts","../src/shared/schemas/userSession.schema.ts","../src/utils/modelUsage.ts"],"sourcesContent":["export * from \"./core/index.js\";\n","// packages/core/src/core/index.ts\nimport fetch from \"cross-fetch\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { z } from \"zod\";\nimport type { ModelUsageInput } from \"@/shared/schemas/modelUsage.schema\";\nimport {\n  type FeatureType,\n  type UsageLogDetailed,\n  UsageLogDetailedSchema,\n} from \"@/shared/schemas/usageLog.schema\";\nimport {\n  type UsagePayload,\n  UsagePayloadSchema,\n} from \"@/shared/schemas/usagePayload.schema\";\nimport { captureModelUsage, type RequestData } from \"../utils/modelUsage\";\n\n/**\n * Schema for validating bulk payload arrays\n */\nconst UsagePayloadArraySchema = z.array(UsagePayloadSchema);\n\n/**\n * Zod schema for API responses\n */\nexport const UsageResponseSchema = z.object({\n  success: z.boolean().default(false),\n  log: z.any().optional(),\n  logs: z.array(z.any()).optional(),\n  error: z.string().optional(),\n});\n\nexport type UsageResponse = z.infer<typeof UsageResponseSchema>;\n\n/**\n * Type for parsed bulk entries\n */\nexport type ParsedEntries = z.infer<typeof UsagePayloadArraySchema>;\n\n/** Revenue split schema */\nexport const RevenueSplitSchema = z.object({\n  id: z.string(),\n  percent: z.number().min(0).max(1),\n});\nexport type RevenueSplit = z.infer<typeof RevenueSplitSchema>;\n\n/** Charge options schema */\nexport const ChargeOptionsSchema = z.object({\n  usage: z.number().nonnegative(),\n  revSplit: z.array(RevenueSplitSchema).optional(),\n  appId: z.string().optional(),\n  organizationId: z.string().optional(),\n  endUserId: z.string().optional(),\n  metadata: z.record(z.string(), z.any()).optional(),\n});\nexport type ChargeOptions = z.infer<typeof ChargeOptionsSchema>;\n\n/**\n * Custom SDK error wrapper\n */\nexport class BillAIError extends Error {\n  public status?: number;\n  public details?: unknown;\n  public causeType: \"client\" | \"network\" | \"validation\" | \"api\" | \"unknown\";\n\n  constructor(\n    message: string,\n    options?: {\n      status?: number;\n      details?: unknown;\n      causeType?: \"client\" | \"network\" | \"validation\" | \"api\" | \"unknown\";\n    }\n  ) {\n    super(message);\n    this.name = \"BillAIError\";\n    this.status = options?.status;\n    this.details = options?.details;\n    this.causeType = options?.causeType ?? \"unknown\";\n  }\n}\n\n/**\n * BillAI SDK configuration\n */\nexport interface BillAIConfig {\n  apiKey: string;\n  baseUrl?: string; // defaults to production API\n  retries?: number; // optional network retries\n  timeoutMs?: number; // optional timeout\n}\n\n/**\n * Main SDK class for interacting with the BillAI API.\n */\nexport class Bill {\n  private apiKey: string;\n  private baseUrl: string;\n  private retries: number;\n  private timeoutMs: number;\n\n  constructor(config: BillAIConfig) {\n    this.apiKey = config.apiKey;\n    this.baseUrl = config.baseUrl ?? \"https://billai-api.shmaplex.com/v1\";\n    this.retries = config.retries ?? 1;\n    this.timeoutMs = config.timeoutMs ?? 10000; // 10s default\n  }\n\n  private async fetchWithRetry(\n    endpoint: string,\n    options: RequestInit\n  ): Promise<Response> {\n    let attempt = 0;\n    let lastError: unknown;\n\n    while (attempt <= this.retries) {\n      try {\n        const controller = new AbortController();\n        const timeout = setTimeout(() => controller.abort(), this.timeoutMs);\n\n        const res = await fetch(`${this.baseUrl}${endpoint}`, {\n          ...options,\n          signal: controller.signal,\n        });\n        clearTimeout(timeout);\n        return res;\n      } catch (err) {\n        lastError = err;\n        attempt++;\n        if (attempt > this.retries) break;\n      }\n    }\n\n    throw new BillAIError(\"Network request failed\", {\n      details: lastError,\n      causeType: \"network\",\n    });\n  }\n\n  private async handleResponse(response: Response): Promise<UsageResponse> {\n    let json: unknown;\n    try {\n      json = await response.json();\n    } catch (err) {\n      throw new BillAIError(\"Invalid JSON response from BillAI API\", {\n        status: response.status,\n        causeType: \"api\",\n      });\n    }\n\n    if (!response.ok) {\n      const msg =\n        (json as any)?.error ?? `${response.status} ${response.statusText}`;\n\n      throw new BillAIError(msg, {\n        status: response.status,\n        details: json,\n        causeType: \"api\",\n      });\n    }\n\n    try {\n      return UsageResponseSchema.parse(json);\n    } catch (err) {\n      throw new BillAIError(\"Response validation failed\", {\n        details: err,\n        causeType: \"validation\",\n      });\n    }\n  }\n\n  /**\n   * Reports a single usage entry.\n   */\n  async reportUsage(data: UsagePayload): Promise<UsageResponse> {\n    try {\n      const parsed = UsagePayloadSchema.parse(data);\n\n      const userAgent =\n        typeof navigator !== \"undefined\"\n          ? navigator.userAgent\n          : data.userAgent ?? \"unknown\";\n\n      const ipAddress = data.ipAddress ?? \"unknown\"; // server can inject this\n\n      const payload = {\n        feature: parsed.feature,\n        usage: parsed.usage,\n        sessionId: parsed.sessionId ?? uuidv4(),\n        appId: parsed.appId,\n        organizationId: parsed.organizationId,\n        endUserId: parsed.endUserId,\n        userAgent,\n        ipAddress,\n        modelUsage: parsed.modelUsage,\n        metadata: parsed.metadata,\n      };\n\n      const res = await this.fetchWithRetry(\"/usage\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) {\n        // Always use status + statusText as the message\n        const statusMessage = `${res.status} ${res.statusText}`.trim();\n\n        throw new BillAIError(`BillAI API error: ${statusMessage}`, {\n          status: res.status,\n          causeType: \"api\",\n          details: await res.json().catch(() => ({})),\n        });\n      }\n\n      return this.handleResponse(res);\n    } catch (err) {\n      // Already a wrapped error\n      if (err instanceof BillAIError) throw err;\n\n      const msg =\n        (err as Error)?.message ??\n        (err as any)?.statusText ??\n        \"Unknown API error\";\n\n      throw new BillAIError(`BillAI API error: ${msg}`, {\n        causeType: \"client\",\n        details: err,\n      });\n    }\n  }\n\n  /**\n   * Reports multiple usage entries in bulk.\n   */\n  async reportUsageBulk(entries: UsagePayload[]): Promise<UsageResponse> {\n    let parsedEntries: ParsedEntries;\n\n    try {\n      parsedEntries = UsagePayloadArraySchema.parse(entries);\n    } catch (err) {\n      throw new BillAIError(\"Invalid bulk usage payload\", {\n        details: err,\n        causeType: \"validation\",\n      });\n    }\n\n    const payload = parsedEntries.map((e) => ({\n      ...e,\n      sessionId: e.sessionId ?? uuidv4(),\n    }));\n\n    const res = await this.fetchWithRetry(\"/usage/bulk\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n    return this.handleResponse(res);\n  }\n\n  /**\n   * Track usage for any async function and automatically capture detailed model usage.\n   *\n   * This function wraps an async call (e.g., an AI SDK request) and records:\n   * - Execution duration (latency)\n   * - Inferred model information (vendor, version, tokens)\n   * - Usage count for billing (tokens or generic metric)\n   *\n   * All model usage data is inferred from the SDK response and/or the function call,\n   * so the client does NOT need to provide any model details.\n   *\n   * Usage reporting to Bill AI is **non-blocking** and will not delay the function result.\n   * This ensures minimal latency impact for client AI requests.\n   *\n   * Supports all AI vendors (OpenAI, Anthropic, Cogent, or any future vendors),\n   * by inferring vendor from the model string returned by the SDK.\n   *\n   * @template T - Return type of the function being tracked\n   * @param fn - Async function to execute (e.g., `openai.chat.completions.create(...)`)\n   * @param opts - Options for usage tracking\n   * @param opts.metric - Feature or metric type, e.g., \"TOKENS\" or \"TEXT_GENERATION\"\n   * @param opts.appId - Optional app identifier for reporting\n   * @param opts.organizationId - Optional org identifier\n   * @param opts.userId - Optional user identifier for per-user tracking\n   * @param opts.metadata - Optional metadata object to attach to usage event\n   *\n   * @returns Promise resolving with:\n   *   - `result`: the original result of the async function\n   *   - `duration`: execution duration in milliseconds\n   *   - `usage`: usage count for billing (e.g., tokens used)\n   *\n   * @example\n   * const { result, duration, usage } = await bill.trackUsage(\n   *   () => openai.chat.completions.create({\n   *     model: \"gpt-4o-mini\",\n   *     messages: [{ role: \"user\", content: \"Explain quantum physics simply.\" }]\n   *   }),\n   *   { metric: \"TEXT_GENERATION\", appId: \"my-ai-writer\", userId: \"customer_123\" }\n   * );\n   */\n  async trackUsage<T>(\n    fn: () => Promise<T>,\n    opts: {\n      metric: FeatureType;\n      appId?: string;\n      organizationId?: string;\n      userId?: string;\n      metadata?: Record<string, any>;\n    }\n  ): Promise<{\n    result: T;\n    duration: number;\n    usage: number | undefined;\n  }> {\n    // Capture the async call and automatically infer model usage\n    const { result, modelUsage } = await captureModelUsage(fn);\n\n    // Enrich modelUsage with additional tracking info\n    const modelUsagePayload: Partial<ModelUsageInput> = {\n      ...modelUsage,\n      latencyMs: modelUsage.latencyMs ?? 0,\n      avgLatencyMs: modelUsage.latencyMs ?? 0,\n      billed: true,\n      userAgent:\n        typeof navigator !== \"undefined\" ? navigator.userAgent : \"node\",\n    };\n\n    // Construct the payload for usage reporting\n    const usagePayload: UsagePayload = {\n      feature: opts.metric,\n      usage: modelUsage.usageCount ?? 1, // fallback if usageCount not available\n      sessionId: modelUsage.sessionId,\n      appId: opts.appId,\n      organizationId: opts.organizationId,\n      endUserId: opts.userId,\n      modelUsage: modelUsagePayload,\n      metadata: opts.metadata,\n    };\n\n    // Report usage asynchronously (non-blocking)\n    this.reportUsage(usagePayload).catch((err) => {\n      console.error(\"BillAI usage reporting failed:\", err);\n    });\n\n    return {\n      result,\n      duration: modelUsagePayload.latencyMs ?? 0,\n      usage: usagePayload.usage > 0 ? usagePayload.usage : undefined,\n    };\n  }\n\n  /**\n   * Charge a user based on usage and optionally split revenue among partners.\n   *\n   * Sends a request to the `/charge` endpoint with the specified usage and revenue split details.\n   *\n   * @async\n   * @param {ChargeOptions} opts - The charge options.\n   * @param {number} opts.usage - The numeric usage amount to charge (e.g., tokens used).\n   * @param {RevenueSplit[]} [opts.revSplit] - Optional array of revenue splits. Each entry should include an `id` and a `percent` (0-1).\n   * @param {string} [opts.appId] - Optional application ID associated with this charge.\n   * @param {string} [opts.organizationId] - Optional organization ID associated with this charge.\n   * @param {string} [opts.endUserId] - Optional end user ID for tracking charges per user.\n   * @param {Record<string, any>} [opts.metadata] - Optional additional metadata to attach to the charge.\n   *\n   * @returns {Promise<UsageResponse>} A promise that resolves with the usage response from the API,\n   * which includes success status and any relevant logs or errors.\n   *\n   * @example\n   * const response = await bill.charge({\n   *   usage: 120,\n   *   revSplit: [\n   *     { id: \"creator_123\", percent: 0.3 },\n   *     { id: \"partner_456\", percent: 0.1 }\n   *   ],\n   *   appId: \"my-ai-writer\",\n   *   endUserId: \"customer_123\"\n   * });\n   */\n  async charge(opts: ChargeOptions): Promise<UsageResponse> {\n    const payload = {\n      usage: opts.usage,\n      revSplit: opts.revSplit,\n      appId: opts.appId,\n      organizationId: opts.organizationId,\n      endUserId: opts.endUserId,\n      metadata: opts.metadata,\n    };\n\n    const res = await this.fetchWithRetry(\"/charge\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n    return this.handleResponse(res);\n  }\n}\n","// apps/shared/schemas/usagePayload.schema.ts\nimport { z } from \"zod\";\nimport { AI_FEATURES } from \"../constants/features\";\nimport { ModelUsageInputSchema } from \"./modelUsage.schema\";\n\n/**\n * Schema for what the SDK or external clients send\n * when reporting usage events to BillAI.\n */\nexport const UsagePayloadSchema = z.object({\n  feature: z.enum(AI_FEATURES),\n  usage: z.number().min(0),\n  sessionId: z.uuid().optional(),\n  appId: z.string().optional(),\n  endUserId: z.string().optional(),\n  organizationId: z.string().optional(),\n  ipAddress: z.string().optional(),\n  userAgent: z.string().optional(),\n  modelUsage: ModelUsageInputSchema.partial().optional(),\n  metadata: z.record(z.string(), z.any()).optional(),\n});\n\n/**\n * Type used by the npm SDK and API endpoints for usage reporting.\n */\nexport type UsagePayload = z.infer<typeof UsagePayloadSchema>;\n","/** Billable AI usage metrics/features */\nexport const AI_FEATURES = [\n  \"TEXT_GENERATION\", // for text/LLM usage\n  \"IMAGE_GENERATION\", // for image diffusion or gen models\n  \"DATA_ANALYSIS\", // for analytical or AI data ops\n  \"TOKENS\", // tokens used for text/LLM models\n  \"COMPUTE_TIME\", // time spent on CPU/GPU for tasks\n  \"VRAM_USAGE\", // GPU memory consumed\n  \"API_CALL\", // number of API requests\n  \"STORAGE\", // optional: storage used per user/app\n  \"OTHER\", // fallback for miscellaneous usage\n] as const;\n","// apps/shared/schemas/modelUsage.schema.ts\nimport { z } from \"zod\";\nimport { ApiKeyReferenceSchema } from \"./apiKey.schema\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { OrganizationReferenceSchema } from \"./organization.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * SessionMetrics — latency metrics for a model usage session\n */\nexport const SessionMetricsSchema = z.object({\n  count: z.number().nonnegative().default(0),\n  avgLatencyMs: z.number().nonnegative().default(0),\n  p50LatencyMs: z.number().nonnegative().default(0),\n  p90LatencyMs: z.number().nonnegative().default(0),\n  p99LatencyMs: z.number().nonnegative().default(0),\n});\nexport type SessionMetrics = z.infer<typeof SessionMetricsSchema>;\n\n/**\n * CountMetrics — success/failure count tracking\n */\nexport const CountMetricsSchema = z.object({\n  successCount: z.number().int().nonnegative().default(0),\n  failureCount: z.number().int().nonnegative().default(0),\n});\nexport type CountMetrics = z.infer<typeof CountMetricsSchema>;\n\n/**\n * Base schema — core fields for ModelUsage\n */\nexport const ModelUsageBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid().optional(),\n  organizationId: z.uuid().optional(),\n  apiKeyId: z.uuid().optional(),\n  appId: z.uuid().optional(),\n  model: z.string(),\n  vendor: z.string(),\n  modelVersion: z.string().optional(),\n  requestType: z.string(),\n  usageCount: z.number().default(1),\n  success: z.boolean().default(true),\n  successCount: z.number().default(0),\n  failureCount: z.number().default(0),\n  avgLatencyMs: z.number().optional(),\n  p50LatencyMs: z.number().optional(),\n  p90LatencyMs: z.number().optional(),\n  p99LatencyMs: z.number().optional(),\n  latencyMs: z.number().optional(),\n  throughput: z.number().optional(),\n  queueTimeMs: z.number().optional(),\n  errorType: z.string().optional(),\n  retryCount: z.number().optional(),\n  region: z.string().optional(),\n  promptLengthTokens: z.number().optional(),\n  responseLengthTokens: z.number().optional(),\n  unitCost: z.number().optional(),\n  totalCost: z.number().optional(),\n  billed: z.boolean().default(false),\n  discountApplied: z.number().optional(),\n  planTier: z.string().optional(),\n  temperature: z.number().optional(),\n  maxTokens: z.number().optional(),\n  totalTokens: z.number().optional(),\n  topP: z.number().optional(),\n  stopSequences: z.array(z.string()).optional(),\n  embeddingDimension: z.number().optional(),\n  imageResolution: z.string().optional(),\n  sdkVersion: z.string().optional(),\n  userAgent: z.string().optional(),\n  language: z.string().optional(),\n  sessionId: z.string().optional(),\n  promptCategory: z.string().optional(),\n  responseQualityScore: z.number().optional(),\n  resourceConsumption: z.number().optional(),\n  concurrentRequests: z.number().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  deletedAt: z.date().nullable().optional(),\n});\n\n/**\n * Input schema — used when creating a new model usage record\n */\nexport const ModelUsageInputSchema = ModelUsageBaseSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  deletedAt: true,\n});\nexport type ModelUsageInput = z.infer<typeof ModelUsageInputSchema>;\n\n/**\n * Reference schema — lightweight version for embedding in other models\n */\nexport const ModelUsageReferenceSchema = ModelUsageBaseSchema.pick({\n  id: true,\n  model: true,\n  vendor: true,\n  requestType: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n/**\n * Detailed schema — includes relations\n */\nexport const ModelUsageDetailedSchema = ModelUsageBaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema).optional(),\n  organization: z.lazy(() => OrganizationReferenceSchema).optional(),\n  apiKey: z.lazy(() => ApiKeyReferenceSchema).optional(),\n  app: z.lazy(() => AppReferenceSchema).optional(),\n});\n\nexport type ModelUsageBase = z.infer<typeof ModelUsageBaseSchema>;\nexport type ModelUsageReference = z.infer<typeof ModelUsageReferenceSchema>;\nexport type ModelUsageDetailed = z.infer<typeof ModelUsageDetailedSchema>;\n","// shared/schemas/apiKey.schema.ts\nimport { z } from \"zod\";\nimport type { API_KEY_PREFIXES } from \"../constants/apiKeys\";\nimport { ModelUsageReferenceSchema } from \"./modelUsage.schema\";\nimport { UsageLogReferenceSchema } from \"./usageLog.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n// Environment can be \"live\" or \"test\"\nexport const API_KEY_ENVIRONMENTS = {\n  LIVE: \"live\",\n  TEST: \"test\",\n} as const;\n\nexport type ApiKeyEnvironment =\n  (typeof API_KEY_ENVIRONMENTS)[keyof typeof API_KEY_ENVIRONMENTS];\n\n/**\n * Base schema — core fields for ApiKey\n */\nexport const ApiKeyBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid().nullable().optional(),\n  keyPrefix: z.string(),\n  hashedKey: z.string(),\n  name: z.string().nullable().optional(),\n  environment: z.string().default(\"live\"),\n  revoked: z.boolean().default(false),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal for embedding\n */\nexport const ApiKeyReferenceSchema = ApiKeyBaseSchema.pick({\n  id: true,\n  userId: true,\n  keyPrefix: true,\n  hashedKey: true,\n  name: true,\n  environment: true,\n  revoked: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const ApiKeyDetailedSchema = ApiKeyBaseSchema.extend({\n  scopes: z.string().nullable().optional(),\n  expiresAt: z.date().nullable().optional(),\n  lastUsedAt: z.date().nullable().optional(),\n\n  user: z\n    .lazy(() => UserReferenceSchema)\n    .optional()\n    .nullable(),\n  usageLogs: z.array(z.lazy(() => UsageLogReferenceSchema)).optional(),\n  modelUsages: z.array(z.lazy(() => ModelUsageReferenceSchema)).optional(),\n});\n\n// ─────────────────────────────────────────────\n// Types\n// ─────────────────────────────────────────────\nexport type ApiKeyBase = z.infer<typeof ApiKeyBaseSchema>;\nexport type ApiKeyReference = z.infer<typeof ApiKeyReferenceSchema>;\nexport type ApiKeyDetailed = z.infer<typeof ApiKeyDetailedSchema>;\n// Prefix type is the values of API_KEY_PREFIXES\nexport type ApiKeyPrefix =\n  (typeof API_KEY_PREFIXES)[keyof typeof API_KEY_PREFIXES];\n\n// ─────────────────────────────────────────────\n// Create API Key input types\n// ─────────────────────────────────────────────\nexport const CreateApiKeyInputSchema = z.object({\n  userId: z.uuid(),\n  name: z.string().optional(),\n  scopes: z.array(z.string()).optional(),\n  environment: z.enum([\"test\", \"live\"]).default(\"live\"),\n});\n\nexport type CreateApiKeyInput = z.infer<typeof CreateApiKeyInputSchema>;\n","// shared/schemas/usageLog.schema.ts\nimport { z } from \"zod\";\nimport { AI_FEATURES } from \"../constants/features\";\nimport { ApiKeyReferenceSchema } from \"./apiKey.schema\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { EndUserReferenceSchema } from \"./endUser.schema\";\nimport { OrganizationReferenceSchema } from \"./organization.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\nimport { UserSessionReferenceSchema } from \"./userSession.schema\";\n\n/**\n * Features enum placeholder\n */\nexport const FeatureEnum = z.enum(AI_FEATURES);\nexport type FeatureType = z.infer<typeof FeatureEnum>;\nexport type Feature = z.infer<typeof FeatureEnum>;\n\n/**\n * Base schema — core fields for a usage log event\n */\nexport const UsageLogBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.string().nullable().optional(),\n  organizationId: z.string().nullable().optional(),\n  appId: z.string().nullable().optional(),\n  endUserId: z.string().nullable().optional(),\n  apiKeyId: z.string().nullable().optional(),\n  feature: FeatureEnum.default(\"OTHER\"),\n  usage: z.number(),\n  unitCost: z.number().nullable().optional(),\n  billed: z.boolean().default(false),\n  sessionId: z.string().nullable().optional(),\n  createdAt: z.date(),\n  openMeterReported: z.boolean().nullable().optional(),\n  openMeterId: z.string().nullable().optional(),\n  deletedAt: z.date().nullable().optional(),\n  metadata: z.record(z.string(), z.any()).optional(),\n});\n\n/**\n * Reference schema — minimal version for lightweight embedding\n */\nexport const UsageLogReferenceSchema = UsageLogBaseSchema.pick({\n  id: true,\n  feature: true,\n  usage: true,\n  billed: true,\n  createdAt: true,\n  sessionId: true,\n  appId: true,\n  organizationId: true,\n});\n\n/**\n * Detailed schema — includes nested relational references\n */\nexport const UsageLogDetailedSchema = UsageLogBaseSchema.extend({\n  user: z\n    .lazy(() => UserReferenceSchema)\n    .nullable()\n    .optional(),\n  organization: z\n    .lazy(() => OrganizationReferenceSchema)\n    .nullable()\n    .optional(),\n  apiKey: z\n    .lazy(() => ApiKeyReferenceSchema)\n    .nullable()\n    .optional(),\n  app: z\n    .lazy(() => AppReferenceSchema)\n    .nullable()\n    .optional(),\n  endUser: z\n    .lazy(() => EndUserReferenceSchema)\n    .nullable()\n    .optional(),\n  session: z\n    .lazy(() => UserSessionReferenceSchema)\n    .nullable()\n    .optional(),\n});\n\n// Types\nexport type UsageLogBase = z.infer<typeof UsageLogBaseSchema>;\nexport type UsageLogReference = z.infer<typeof UsageLogReferenceSchema>;\nexport type UsageLogDetailed = z.infer<typeof UsageLogDetailedSchema>;\n","// shared/schemas/app.schema.ts\nimport { z } from \"zod\";\nimport {\n  OrganizationDetailedSchema,\n  OrganizationReferenceSchema,\n} from \"./organization.schema\";\nimport { UserDetailedSchema, UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core fields for App\n */\nexport const AppBaseSchema = z.object({\n  id: z.uuid(),\n  name: z.string(),\n  description: z.string().optional(),\n  ownerId: z.string().optional(),\n  organizationId: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  deletedAt: z.date().optional(),\n  isActive: z.boolean().default(true),\n});\n\n/**\n * Reference schema — minimal embedding of App\n */\nexport const AppReferenceSchema = AppBaseSchema.extend({\n  owner: z.lazy(() => UserReferenceSchema).optional(),\n  organization: z.lazy(() => OrganizationReferenceSchema).optional(),\n});\n\n/**\n * Detailed schema — includes nested full objects\n */\nexport const AppDetailedSchema = AppBaseSchema.extend({\n  owner: z.lazy(() => UserDetailedSchema).optional(),\n  organization: z.lazy(() => OrganizationDetailedSchema).optional(),\n});\n\n// ─────────────────────────────────────────────\n// Types\n// ─────────────────────────────────────────────\nexport type AppBase = z.infer<typeof AppBaseSchema>;\nexport type AppReference = z.infer<typeof AppReferenceSchema>;\nexport type AppDetailed = z.infer<typeof AppDetailedSchema>;\n","// apps/shared/schemas/organization.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { ModelUsageReferenceSchema } from \"./modelUsage.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core fields for Organization\n */\nexport const OrganizationBaseSchema = z.object({\n  id: z.uuid(),\n  name: z.string(),\n  domain: z.string().nullable().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal fields for embedding elsewhere\n */\nexport const OrganizationReferenceSchema = OrganizationBaseSchema.pick({\n  id: true,\n  name: true,\n  domain: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const OrganizationDetailedSchema = OrganizationBaseSchema.extend({\n  users: z.array(z.lazy(() => UserReferenceSchema)).optional(),\n  apps: z.array(z.lazy(() => AppReferenceSchema)).optional(),\n  modelUsages: z.array(z.lazy(() => ModelUsageReferenceSchema)).optional(),\n});\n\nexport type OrganizationBase = z.infer<typeof OrganizationBaseSchema>;\nexport type OrganizationReference = z.infer<typeof OrganizationReferenceSchema>;\nexport type OrganizationDetailed = z.infer<typeof OrganizationDetailedSchema>;\n\n/**\n * Input schemas\n */\nexport const CreateOrganizationInputSchema = z.object({\n  name: z.string().min(1),\n  domain: z.string().optional(),\n});\nexport type CreateOrganizationInput = z.infer<\n  typeof CreateOrganizationInputSchema\n>;\n\nexport const UpdateOrganizationInputSchema = z.object({\n  name: z.string().min(1).optional(),\n  domain: z.string().optional(),\n});\nexport type UpdateOrganizationInput = z.infer<\n  typeof UpdateOrganizationInputSchema\n>;\n","// shared/schemas/user.schema.ts\nimport { z } from \"zod\";\n\n// ─────────────────────────────────────────────\n// Imports: Related Reference Schemas\n// ─────────────────────────────────────────────\nimport { AlertReferenceSchema } from \"./alert.schema\";\nimport { ApiKeyReferenceSchema } from \"./apiKey.schema\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { AppApiKeyReferenceSchema } from \"./appApiKey.schema\";\nimport { AuditLogReferenceSchema } from \"./auditLog.schema\";\nimport { InvoiceReferenceSchema } from \"./invoice.schema\";\nimport { MFAReferenceSchema } from \"./mfa.schema\";\nimport { ModelUsageReferenceSchema } from \"./modelUsage.schema\";\nimport { OrganizationReferenceSchema } from \"./organization.schema\";\nimport { PlanReferenceSchema } from \"./plan.schema\";\nimport { RevenueSplitReferenceSchema } from \"./revenueSplit.schema\";\nimport { ReviewReferenceSchema } from \"./review.schema\";\nimport { RoleReferenceSchema } from \"./role.schema\";\nimport { UsageLogReferenceSchema } from \"./usageLog.schema\";\nimport { UserPreferencesReferenceSchema } from \"./userPreferences.schema\";\nimport { UserSessionReferenceSchema } from \"./userSession.schema\";\n\n/**\n * Base schema for User (minimal flat structure)\n * Used internally for creation, validation, or lightweight fetches.\n */\nexport const UserBaseSchema = z.object({\n  id: z.uuid(),\n  email: z.email(),\n  password: z.string().optional().nullable(),\n  fullName: z.string().optional().nullable(),\n  phone: z.string().optional().nullable(),\n  bio: z.string().optional().nullable(),\n  title: z.string().optional().nullable(),\n\n  authId: z.string(),\n  provider: z.string(),\n\n  isActive: z.boolean().default(true),\n  isVerified: z.boolean().default(false),\n\n  avatarUrl: z.string().optional().nullable(),\n  locale: z.string().optional().nullable(),\n  timezone: z.string().optional().nullable(),\n  language: z.string().optional().nullable(),\n\n  roleId: z.uuid().nullable().optional(),\n  organizationId: z.uuid().nullable().optional(),\n  planId: z.uuid().nullable().optional(),\n\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  deletedAt: z.date().optional().nullable(),\n});\n\n/**\n * Reference schema — used to embed user info inside other models.\n * Lightweight, no deep nesting, avoids circular dependencies.\n */\nexport const UserReferenceSchema = UserBaseSchema.pick({\n  id: true,\n  email: true,\n  fullName: true,\n  organizationId: true,\n  roleId: true,\n});\n\n/**\n * Detailed schema — full user with nested relations and metadata.\n */\nexport const UserDetailedSchema = UserBaseSchema.extend({\n  // ─────────── Relations ───────────\n  role: z\n    .lazy(() => RoleReferenceSchema)\n    .optional()\n    .nullable(),\n\n  organization: z\n    .lazy(() => OrganizationReferenceSchema)\n    .optional()\n    .nullable(),\n\n  plan: z\n    .lazy(() => PlanReferenceSchema)\n    .optional()\n    .nullable(),\n\n  // ─────────── Nested Collections ───────────\n  sessions: z.array(z.lazy(() => UserSessionReferenceSchema)).optional(),\n  invoices: z.array(z.lazy(() => InvoiceReferenceSchema)).optional(),\n  apiKeys: z.array(z.lazy(() => ApiKeyReferenceSchema)).optional(),\n  auditLogs: z.array(z.lazy(() => AuditLogReferenceSchema)).optional(),\n  preferences: z\n    .lazy(() => UserPreferencesReferenceSchema)\n    .optional()\n    .nullable(),\n  mfaSettings: z.array(z.lazy(() => MFAReferenceSchema)).optional(),\n  reviews: z.array(z.lazy(() => ReviewReferenceSchema)).optional(),\n  modelUsages: z.array(z.lazy(() => ModelUsageReferenceSchema)).optional(),\n  revenueSplits: z.array(z.lazy(() => RevenueSplitReferenceSchema)).optional(),\n  apps: z.array(z.lazy(() => AppReferenceSchema)).optional(),\n  alerts: z.array(z.lazy(() => AlertReferenceSchema)).optional(),\n  appApiKeys: z.array(z.lazy(() => AppApiKeyReferenceSchema)).optional(),\n  usageLogs: z.array(z.lazy(() => UsageLogReferenceSchema)).optional(),\n});\n\n// ─────────────────────────────────────────────\n// Types\n// ─────────────────────────────────────────────\nexport type UserBase = z.infer<typeof UserBaseSchema>;\nexport type UserReference = z.infer<typeof UserReferenceSchema>;\nexport type UserDetailed = z.infer<typeof UserDetailedSchema>;\n","// shared/schemas/alert.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core fields for Alert\n */\nexport const AlertBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid(),\n  appId: z.uuid().optional().nullable(),\n  type: z.string(),\n  message: z.string(),\n  triggeredAt: z.date(),\n  isRead: z.boolean().default(false),\n});\n\n/**\n * Reference schema — minimal for embedding in other models\n */\nexport const AlertReferenceSchema = AlertBaseSchema.pick({\n  id: true,\n  userId: true,\n  appId: true,\n  type: true,\n  message: true,\n  triggeredAt: true,\n  isRead: true,\n});\n\n/**\n * Detailed schema — includes nested relationships\n */\nexport const AlertDetailedSchema = AlertBaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema),\n  app: z\n    .lazy(() => AppReferenceSchema)\n    .optional()\n    .nullable(),\n});\n\n// ─────────────────────────────────────────────\n// Types\n// ─────────────────────────────────────────────\nexport type AlertBase = z.infer<typeof AlertBaseSchema>;\nexport type AlertReference = z.infer<typeof AlertReferenceSchema>;\nexport type AlertDetailed = z.infer<typeof AlertDetailedSchema>;\n","// shared/schemas/appApiKey.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema for AppApiKey\n * Contains the core fields for creation / updates\n */\nexport const AppApiKeyBaseSchema = z.object({\n  appId: z.string(),\n  key: z.string(),\n  createdByUserId: z.string().optional(),\n  expiresAt: z.date().optional(),\n});\n\nexport type AppApiKeyBase = z.infer<typeof AppApiKeyBaseSchema>;\n\n/**\n * Minimal / Reference schema for AppApiKey\n * Includes unique identifiers and timestamps\n */\nexport const AppApiKeyReferenceSchema = AppApiKeyBaseSchema.extend({\n  id: z.uuid(),\n  createdAt: z.date(),\n});\n\nexport type AppApiKeyReference = z.infer<typeof AppApiKeyReferenceSchema>;\n\n/**\n * Full / Detailed schema for AppApiKey\n * Includes nested references to related models\n */\nexport const AppApiKeyDetailedSchema = AppApiKeyReferenceSchema.extend({\n  app: z.lazy(() => AppReferenceSchema),\n  createdBy: z.lazy(() => UserReferenceSchema).optional(),\n});\n\nexport type AppApiKeyDetailed = z.infer<typeof AppApiKeyDetailedSchema>;\n","// apps/shared/schemas/auditLog.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base Audit Log Schema — the core DB-level model.\n */\nexport const AuditLogBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid(),\n  action: z.string().min(1, \"Action is required.\"),\n  details: z.string().optional(),\n  createdAt: z.date(),\n  appId: z.uuid().optional(),\n});\n\n/**\n * Reference version — minimal fields for relational linking.\n * Used when embedding AuditLog references in other schemas.\n */\nexport const AuditLogReferenceSchema = AuditLogBaseSchema.pick({\n  id: true,\n  action: true,\n  createdAt: true,\n});\n\n/**\n * Populated (detailed) version — includes expanded relations.\n * Useful for API responses or admin dashboard views.\n */\nexport const AuditLogDetailedSchema = AuditLogBaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema),\n  app: z.lazy(() => AppReferenceSchema).optional(),\n});\n\nexport type AuditLogBase = z.infer<typeof AuditLogBaseSchema>;\nexport type AuditLogReference = z.infer<typeof AuditLogReferenceSchema>;\nexport type AuditLogDetailed = z.infer<typeof AuditLogDetailedSchema>;\n","// shared/schemas/invoice.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { ChargeReferenceSchema } from \"./charge.schema\";\nimport { EndUserReferenceSchema } from \"./endUser.schema\";\nimport { InvoiceItemReferenceSchema } from \"./invoiceItem.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base Invoice schema — defines core structure.\n */\nexport const InvoiceBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid(),\n  appId: z.uuid().optional(),\n  endUserId: z.uuid().optional(),\n  amount: z.number(),\n  currency: z.string(),\n  paid: z.boolean(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  dueDate: z.date().optional(),\n  paidAt: z.date().optional(),\n  deletedAt: z.date().optional(),\n});\n\n/**\n * Reference schema — lightweight version for embedding in other models.\n */\nexport const InvoiceReferenceSchema = InvoiceBaseSchema.pick({\n  id: true,\n  amount: true,\n  currency: true,\n  paid: true,\n  createdAt: true,\n});\n\n/**\n * Detailed schema — includes relations.\n */\nexport const InvoiceDetailedSchema = InvoiceBaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema).optional(),\n  app: z.lazy(() => AppReferenceSchema).optional(),\n  endUser: z.lazy(() => EndUserReferenceSchema).optional(),\n  items: z.array(z.lazy(() => InvoiceItemReferenceSchema)).optional(),\n  charges: z.array(z.lazy(() => ChargeReferenceSchema)).optional(),\n});\n\nexport type InvoiceBase = z.infer<typeof InvoiceBaseSchema>;\nexport type InvoiceReference = z.infer<typeof InvoiceReferenceSchema>;\nexport type InvoiceDetailed = z.infer<typeof InvoiceDetailedSchema>;\n","// shared/schemas/charge.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { EndUserReferenceSchema } from \"./endUser.schema\";\nimport { InvoiceReferenceSchema } from \"./invoice.schema\";\n\n/**\n * Base Charge Schema — represents the core persisted entity.\n */\nexport const ChargeBaseSchema = z.object({\n  id: z.uuid(),\n  invoiceId: z.uuid().optional(),\n  endUserId: z.uuid().optional(),\n  appId: z.uuid(),\n  amount: z.number().nonnegative(),\n  status: z.enum([\"PENDING\", \"PAID\", \"FAILED\", \"REFUNDED\"]),\n  createdAt: z.date(),\n  paidAt: z.date().optional(),\n  deletedAt: z.date().optional(),\n});\n\n/**\n * Reference version — minimal for nested use in related entities.\n */\nexport const ChargeReferenceSchema = ChargeBaseSchema.pick({\n  id: true,\n  appId: true,\n  amount: true,\n  status: true,\n  createdAt: true,\n});\n\n/**\n * Detailed version — full entity with expanded relational references.\n */\nexport const ChargeDetailedSchema = ChargeBaseSchema.extend({\n  invoice: z.lazy(() => InvoiceReferenceSchema).optional(),\n  endUser: z.lazy(() => EndUserReferenceSchema).optional(),\n  app: z.lazy(() => AppReferenceSchema),\n});\n\nexport type ChargeBase = z.infer<typeof ChargeBaseSchema>;\nexport type ChargeReference = z.infer<typeof ChargeReferenceSchema>;\nexport type ChargeDetailed = z.infer<typeof ChargeDetailedSchema>;\n","// shared/schemas/endUser.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { ChargeReferenceSchema } from \"./charge.schema\";\nimport { InvoiceReferenceSchema } from \"./invoice.schema\";\n\n/**\n * Base EndUser Schema — core database representation.\n */\nexport const EndUserBaseSchema = z.object({\n  id: z.uuid(),\n  appId: z.uuid(),\n  externalId: z.string(),\n  email: z.email().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  deletedAt: z.date().optional(),\n});\n\n/**\n * Reference version — for lightweight embedding.\n */\nexport const EndUserReferenceSchema = EndUserBaseSchema.pick({\n  id: true,\n  appId: true,\n  externalId: true,\n  email: true,\n});\n\n/**\n * Detailed version — includes relational references.\n */\nexport const EndUserDetailedSchema = EndUserBaseSchema.extend({\n  app: z.lazy(() => AppReferenceSchema).optional(),\n  invoices: z.array(z.lazy(() => InvoiceReferenceSchema)).optional(),\n  charges: z.array(z.lazy(() => ChargeReferenceSchema)).optional(),\n  usageLogs: z.array(z.any()).optional(), // replace with UsageLogReferenceSchema when available\n  eventLogs: z.array(z.any()).optional(), // replace with EventLogReferenceSchema\n  usageLimits: z.array(z.any()).optional(), // replace with UsageLimitReferenceSchema\n  sdkLogs: z.array(z.any()).optional(), // replace with SdkLogReferenceSchema\n});\n\nexport type EndUserBase = z.infer<typeof EndUserBaseSchema>;\nexport type EndUserReference = z.infer<typeof EndUserReferenceSchema>;\nexport type EndUserDetailed = z.infer<typeof EndUserDetailedSchema>;\n","// shared/schemas/invoiceItem.schema.ts\nimport { z } from \"zod\";\nimport { InvoiceReferenceSchema } from \"./invoice.schema\";\n\n/**\n * Base InvoiceItem schema — core fields\n */\nexport const InvoiceItemBaseSchema = z.object({\n  id: z.uuid(),\n  invoiceId: z.uuid(),\n  description: z.string(),\n  amount: z.number(),\n  quantity: z.number().default(1),\n  createdAt: z.date(),\n});\n\n/**\n * Reference schema — lightweight version for embedding in other models\n */\nexport const InvoiceItemReferenceSchema = InvoiceItemBaseSchema.pick({\n  id: true,\n  description: true,\n  amount: true,\n  quantity: true,\n});\n\n/**\n * Detailed schema — includes relations\n */\nexport const InvoiceItemDetailedSchema = InvoiceItemBaseSchema.extend({\n  invoice: z.lazy(() => InvoiceReferenceSchema).optional(),\n});\n\nexport type InvoiceItemBase = z.infer<typeof InvoiceItemBaseSchema>;\nexport type InvoiceItemReference = z.infer<typeof InvoiceItemReferenceSchema>;\nexport type InvoiceItemDetailed = z.infer<typeof InvoiceItemDetailedSchema>;\n","// apps/shared/schemas/mfa.schema.ts\nimport { z } from \"zod\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base MFA schema — core fields\n */\nexport const MFABaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid(),\n  type: z.string(),\n  secret: z.string(),\n  enabled: z.boolean().default(false),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — lightweight version for embedding\n */\nexport const MFAReferenceSchema = MFABaseSchema.pick({\n  id: true,\n  type: true,\n  enabled: true,\n});\n\n/**\n * Detailed schema — includes relations\n */\nexport const MFADetailedSchema = MFABaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema).optional(),\n});\n\nexport type MFABase = z.infer<typeof MFABaseSchema>;\nexport type MFAReference = z.infer<typeof MFAReferenceSchema>;\nexport type MFADetailed = z.infer<typeof MFADetailedSchema>;\n","// shared/schemas/plan.schema.ts\nimport { z } from \"zod\";\nimport { OrganizationPlanReferenceSchema } from \"./organizationPlan.schema\";\nimport { PlanFeatureReferenceSchema } from \"./planFeature.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core Plan fields\n */\nexport const PlanBaseSchema = z.object({\n  id: z.uuid(),\n  name: z.string(),\n  price: z.number(),\n  maxUsage: z.number().optional(),\n  interval: z.string().default(\"monthly\"),\n  features: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal fields for embedding elsewhere\n */\nexport const PlanReferenceSchema = PlanBaseSchema.pick({\n  id: true,\n  name: true,\n  price: true,\n  maxUsage: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const PlanDetailedSchema = PlanBaseSchema.extend({\n  users: z.array(z.lazy(() => UserReferenceSchema)).optional(),\n  organizationPlans: z\n    .array(z.lazy(() => OrganizationPlanReferenceSchema))\n    .optional(),\n  planFeatures: z.array(z.lazy(() => PlanFeatureReferenceSchema)).optional(),\n});\n\n// Types\nexport type PlanBase = z.infer<typeof PlanBaseSchema>;\nexport type PlanReference = z.infer<typeof PlanReferenceSchema>;\nexport type PlanDetailed = z.infer<typeof PlanDetailedSchema>;\n","// apps/shared/schemas/organizationPlan.schema.ts\nimport { z } from \"zod\";\nimport { OrganizationReferenceSchema } from \"./organization.schema\";\nimport { PlanReferenceSchema } from \"./plan.schema\";\n\n/**\n * Base schema — core fields for OrganizationPlan\n */\nexport const OrganizationPlanBaseSchema = z.object({\n  id: z.uuid(),\n  organizationId: z.uuid().optional(),\n  planId: z.uuid().optional(),\n  startDate: z.date(),\n  endDate: z.date().nullable().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal fields for embedding elsewhere\n */\nexport const OrganizationPlanReferenceSchema = OrganizationPlanBaseSchema.pick({\n  id: true,\n  organizationId: true,\n  planId: true,\n  startDate: true,\n  endDate: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const OrganizationPlanDetailedSchema = OrganizationPlanBaseSchema.extend(\n  {\n    organization: z.lazy(() => OrganizationReferenceSchema).optional(),\n    plan: z.lazy(() => PlanReferenceSchema).optional(),\n  }\n);\n\nexport type OrganizationPlanBase = z.infer<typeof OrganizationPlanBaseSchema>;\nexport type OrganizationPlanReference = z.infer<\n  typeof OrganizationPlanReferenceSchema\n>;\nexport type OrganizationPlanDetailed = z.infer<\n  typeof OrganizationPlanDetailedSchema\n>;\n","// shared/schemas/planFeature.schema.ts\nimport { z } from \"zod\";\nimport { PlanReferenceSchema } from \"./plan.schema\";\n\n/**\n * Base schema — core PlanFeature fields\n */\nexport const PlanFeatureBaseSchema = z.object({\n  id: z.uuid(),\n  planId: z.uuid(),\n  name: z.string(),\n  limit: z.number().optional(),\n  price: z.number().optional(),\n  metadata: z.any().optional(),\n  createdAt: z.date(),\n});\n\n/**\n * Reference schema — minimal fields for embedding elsewhere\n */\nexport const PlanFeatureReferenceSchema = PlanFeatureBaseSchema.pick({\n  id: true,\n  name: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const PlanFeatureDetailedSchema = PlanFeatureBaseSchema.extend({\n  plan: z.lazy(() => PlanReferenceSchema).optional(),\n});\n\n// Types\nexport type PlanFeatureBase = z.infer<typeof PlanFeatureBaseSchema>;\nexport type PlanFeatureReference = z.infer<typeof PlanFeatureReferenceSchema>;\nexport type PlanFeatureDetailed = z.infer<typeof PlanFeatureDetailedSchema>;\n","// shared/schemas/revenueSplit.schema.ts\nimport { z } from \"zod\";\nimport { AppReferenceSchema } from \"./app.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core RevenueSplit fields\n */\nexport const RevenueSplitBaseSchema = z.object({\n  id: z.uuid(),\n  appId: z.uuid(),\n  recipientId: z.uuid().optional(),\n  percent: z.number(),\n  createdAt: z.date(),\n  deletedAt: z.date().optional(),\n});\n\n/**\n * Reference schema — minimal fields for embedding elsewhere\n */\nexport const RevenueSplitReferenceSchema = RevenueSplitBaseSchema.pick({\n  id: true,\n  percent: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const RevenueSplitDetailedSchema = RevenueSplitBaseSchema.extend({\n  app: z.lazy(() => AppReferenceSchema),\n  recipient: z.lazy(() => UserReferenceSchema).optional(),\n});\n\n// Types\nexport type RevenueSplitBase = z.infer<typeof RevenueSplitBaseSchema>;\nexport type RevenueSplitReference = z.infer<typeof RevenueSplitReferenceSchema>;\nexport type RevenueSplitDetailed = z.infer<typeof RevenueSplitDetailedSchema>;\n","// shared/schemas/review.schema.ts\nimport { z } from \"zod\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Review status enum\n */\nexport const ReviewStatusEnum = z.enum([\"PENDING\", \"APPROVED\", \"REJECTED\"]);\n\n/**\n * Base schema — core Review fields\n */\nexport const ReviewBaseSchema = z.object({\n  id: z.uuid(),\n  reviewerId: z.uuid(),\n  resourceType: z.string(),\n  resourceId: z.string(),\n  status: ReviewStatusEnum,\n  notes: z.string().nullable().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal fields for embedding elsewhere\n */\nexport const ReviewReferenceSchema = ReviewBaseSchema.pick({\n  id: true,\n  status: true,\n  resourceType: true,\n  resourceId: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const ReviewDetailedSchema = ReviewBaseSchema.extend({\n  reviewer: z.lazy(() => UserReferenceSchema),\n});\n\n// Types\nexport type ReviewBase = z.infer<typeof ReviewBaseSchema>;\nexport type ReviewReference = z.infer<typeof ReviewReferenceSchema>;\nexport type ReviewDetailed = z.infer<typeof ReviewDetailedSchema>;\n","// shared/schemas/role.schema.ts\nimport { z } from \"zod\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core Role fields\n */\nexport const RoleBaseSchema = z.object({\n  id: z.uuid(),\n  name: z.string(),\n  description: z.string().optional(),\n  permissions: z.string().optional(),\n  createdBy: z.string().optional(),\n  updatedBy: z.string().optional(),\n});\n\n/**\n * Reference schema — minimal Role info for embedding elsewhere\n */\nexport const RoleReferenceSchema = RoleBaseSchema.pick({\n  id: true,\n  name: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const RoleDetailedSchema = RoleBaseSchema.extend({\n  users: z.array(z.lazy(() => UserReferenceSchema)).optional(),\n});\n\n// Types\nexport type RoleBase = z.infer<typeof RoleBaseSchema>;\nexport type RoleReference = z.infer<typeof RoleReferenceSchema>;\nexport type RoleDetailed = z.infer<typeof RoleDetailedSchema>;\n","// shared/schemas/userPreferences.schema.ts\nimport { z } from \"zod\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core fields\n */\nexport const UserPreferencesBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid(),\n  timezone: z.string().optional(),\n  locale: z.string().optional(),\n  language: z.string().optional(),\n  emailNotifications: z.boolean().default(true),\n  darkMode: z.boolean().default(false),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal info for embedding elsewhere\n */\nexport const UserPreferencesReferenceSchema = UserPreferencesBaseSchema.pick({\n  id: true,\n  userId: true,\n  emailNotifications: true,\n  darkMode: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const UserPreferencesDetailedSchema = UserPreferencesBaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema).optional(),\n});\n\n// Types\nexport type UserPreferencesBase = z.infer<typeof UserPreferencesBaseSchema>;\nexport type UserPreferencesReference = z.infer<\n  typeof UserPreferencesReferenceSchema\n>;\nexport type UserPreferencesDetailed = z.infer<\n  typeof UserPreferencesDetailedSchema\n>;\n","// shared/schemas/userSession.schema.ts\nimport { z } from \"zod\";\nimport { UsageLogReferenceSchema } from \"./usageLog.schema\";\nimport { UserReferenceSchema } from \"./user.schema\";\n\n/**\n * Base schema — core session fields\n */\nexport const UserSessionBaseSchema = z.object({\n  id: z.uuid(),\n  userId: z.uuid(),\n  expiresAt: z.date(),\n  ipAddress: z.string().optional(),\n  userAgent: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n/**\n * Reference schema — minimal info for embedding elsewhere\n */\nexport const UserSessionReferenceSchema = UserSessionBaseSchema.pick({\n  id: true,\n  userId: true,\n  expiresAt: true,\n  createdAt: true,\n});\n\n/**\n * Detailed schema — includes nested relations\n */\nexport const UserSessionDetailedSchema = UserSessionBaseSchema.extend({\n  user: z.lazy(() => UserReferenceSchema).optional(),\n  usageLogs: z.array(z.lazy(() => UsageLogReferenceSchema)).optional(),\n});\n\n// Types\nexport type UserSessionBase = z.infer<typeof UserSessionBaseSchema>;\nexport type UserSessionReference = z.infer<typeof UserSessionReferenceSchema>;\nexport type UserSessionDetailed = z.infer<typeof UserSessionDetailedSchema>;\n","import { z } from \"zod\";\nimport type { ModelUsageInput } from \"@/shared/schemas\";\n\n/** Safely extracts the first object literal inside a function call */\nfunction extractRequestFromFn(\n  fn: () => Promise<any>\n): Partial<Record<string, any>> {\n  const fnStr = fn.toString();\n\n  // Match the first {...} inside parentheses\n  const argsMatch = fnStr.match(/\\(\\s*({[\\s\\S]*?})\\s*\\)/);\n  if (!argsMatch) return {};\n\n  let argStr = argsMatch[1];\n\n  // Remove comments\n  argStr = argStr.replace(/\\/\\/.*$/gm, \"\").replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\");\n\n  // Quote unquoted keys\n  argStr = argStr.replace(/([a-zA-Z0-9_]+)\\s*:/g, '\"$1\":');\n\n  // Remove trailing commas\n  argStr = argStr.replace(/,(\\s*[}\\]])/g, \"$1\");\n\n  // Keep everything up to matching closing brace\n  let braceCount = 0;\n  let endIndex = 0;\n  for (let i = 0; i < argStr.length; i++) {\n    if (argStr[i] === \"{\") braceCount++;\n    else if (argStr[i] === \"}\") braceCount--;\n    if (braceCount === 0) {\n      endIndex = i + 1;\n      break;\n    }\n  }\n  argStr = argStr.slice(0, endIndex);\n\n  try {\n    return JSON.parse(argStr) as Partial<Record<string, any>>;\n  } catch (err) {\n    console.warn(\"Failed to parse request object:\", err);\n    return {};\n  }\n}\n\n/** Infers the AI vendor from a model string */\nexport function inferVendorFromModel(model: string): string {\n  const m = model.toLowerCase();\n  if (m.startsWith(\"gpt-\") || m.startsWith(\"text-\") || m.startsWith(\"code-\"))\n    return \"openai\";\n  if (m.startsWith(\"claude\")) return \"anthropic\";\n  if (m.startsWith(\"command-\") || m.startsWith(\"xlarge-\")) return \"cohere\";\n  if (m.startsWith(\"palm-\") || m.startsWith(\"gemini-\")) return \"google\";\n  if (m.startsWith(\"mistral-\") || m.startsWith(\"mix-\")) return \"mistral\";\n  if (m.startsWith(\"cog-\")) return \"cogent\";\n  if (m.startsWith(\"jurassic-\") || m.startsWith(\"j1-\")) return \"ai21\";\n  if (m.startsWith(\"llama-\") || m.startsWith(\"alpaca-\")) return \"llama\";\n  return \"unknown\";\n}\n\n/** Request schema */\nexport const RequestDataSchema = z.object({\n  model: z.string(),\n  modelVersion: z.string().optional(),\n  requestType: z.string(),\n  maxTokens: z.number().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  stopSequences: z.array(z.string()).optional(),\n  prompt: z.union([z.string(), z.array(z.string())]).optional(),\n  messages: z\n    .array(z.object({ role: z.string(), content: z.string() }))\n    .optional(),\n  sdkVersion: z.string().optional(),\n  userAgent: z.string().optional(),\n  promptCategory: z.string().optional(),\n  region: z.string().optional(),\n});\nexport type RequestData = z.infer<typeof RequestDataSchema>;\n\n/** Response schema */\nexport const ResponseDataSchema = z.object({\n  promptLengthTokens: z.number().optional(),\n  responseLengthTokens: z.number().optional(),\n  totalTokens: z.number().optional(),\n  retryCount: z.number().optional(),\n  errorType: z.string().optional(),\n});\nexport type ResponseData = z.infer<typeof ResponseDataSchema>;\n\n/**\n * Roughly estimates token count from a string or array of strings.\n */\nfunction estimateTokens(input?: string | string[]): number {\n  if (!input) return 0;\n  if (Array.isArray(input))\n    return input.map((p) => p.length).reduce((a, b) => a + b, 0) / 4;\n  return input.length / 4; // Approx: 1 token ≈ 4 chars\n}\n\n/**\n * Wraps an SDK call and captures model usage.\n * Tries to parse function arguments if possible, and estimates tokens if usage is missing.\n */\nexport async function captureModelUsage<T>(\n  fn: () => Promise<T>\n): Promise<{ result: T; modelUsage: Partial<ModelUsageInput> }> {\n  const start = Date.now();\n\n  // Parse function arguments for metadata\n  const requestPayload: Partial<RequestData> = extractRequestFromFn(fn);\n  const modelName = requestPayload.model ?? \"unknown\";\n  const vendor = inferVendorFromModel(modelName);\n\n  try {\n    const result = await fn();\n    const duration = Date.now() - start;\n\n    // Extract usage from API result or fallback to estimated tokens\n    let respData: ResponseData = (result as any)?.usage ?? {};\n    if (\n      respData.promptLengthTokens === undefined &&\n      (requestPayload.prompt || requestPayload.messages)\n    ) {\n      const promptTokens =\n        estimateTokens(requestPayload.prompt) +\n        estimateTokens(requestPayload.messages?.map((m) => m.content));\n      respData = {\n        promptLengthTokens: promptTokens,\n        responseLengthTokens: 0,\n        totalTokens: promptTokens,\n      };\n    }\n\n    const modelUsage: Partial<ModelUsageInput> = {\n      model: modelName,\n      vendor,\n      modelVersion:\n        requestPayload.modelVersion ?? (result as any)?.modelVersion,\n      requestType: requestPayload.requestType ?? \"unknown\",\n      sdkVersion: requestPayload.sdkVersion,\n      userAgent: requestPayload.userAgent,\n      promptCategory: requestPayload.promptCategory,\n      region: requestPayload.region,\n      maxTokens: requestPayload.maxTokens,\n      promptLengthTokens: respData.promptLengthTokens ?? 0,\n      responseLengthTokens: respData.responseLengthTokens ?? 0,\n      totalTokens: respData.totalTokens,\n      latencyMs: duration,\n      errorType: undefined,\n      retryCount: respData.retryCount,\n    };\n\n    return { result, modelUsage };\n  } catch (error: unknown) {\n    const duration = Date.now() - start;\n\n    const modelUsage: Partial<ModelUsageInput> = {\n      model: modelName,\n      vendor,\n      modelVersion: requestPayload.modelVersion,\n      requestType: requestPayload.requestType ?? \"unknown\",\n      sdkVersion: requestPayload.sdkVersion,\n      userAgent: requestPayload.userAgent,\n      promptCategory: requestPayload.promptCategory,\n      region: requestPayload.region,\n      maxTokens: requestPayload.maxTokens,\n      latencyMs: duration,\n      errorType: (error as any)?.name ?? \"Error\",\n      retryCount: undefined,\n    };\n\n    const msg =\n      (error as any)?.message ??\n      (error as any)?.statusText ??\n      \"Unknown API error\";\n    const wrappedError = new Error(`BillAI API error: ${msg}`);\n    (wrappedError as any).modelUsage = modelUsage;\n\n    throw wrappedError;\n  }\n}\n"],"mappings":"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","names":["import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","import_zod","fetch","uuidv4"]}